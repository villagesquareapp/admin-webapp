name: CI / Build & Publish Docker

# Trigger on push to admin-webapp or main, or manually
on:
  push:
    branches:
      - admin-webapp
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/admin-webapp

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read        # needed for checkout
      packages: write       # needed to push images to GHCR
      id-token: write       # optional for OIDC

    steps:
      # 1. Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Show debug info
      - name: Show repo files
        run: ls -la
      - name: Node & NPM versions
        run: |
          node -v
          npm -v

      # 3. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 4. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5. Run tests (optional)
      - name: Run tests
        run: npm test || echo "No tests or failed, continuing"

      # 6. Build Next.js app
      - name: Build Next.js app
        run: npm run build

      # 7. Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 8. Debug Dockerfile
      - name: Check Dockerfile
        run: cat Dockerfile

      # 9. Login to GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 10. Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile   # Ensure this points to your Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

      # 11. Notify post-build
      - name: Post-build notification
        run: echo "Docker image pushed: ${{ env.IMAGE_NAME }}:${{ github.sha }}"

